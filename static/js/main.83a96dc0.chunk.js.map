{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","currentScore","topScore","isClicked","isClickedId","elements","shuffleImages","setState","sort","Math","random","clickedCard","id","newClickedId","includes","push","Navbar","bg","className","Brand","href","Toggle","Collapse","Text","this","map","e","Image","onClick","key","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAyEeA,E,2MAnEbC,MAAQ,CACNC,MAAO,wBACPC,aAAc,EACdC,SAAU,EACVC,WAAW,EACXC,YAAa,GACbC,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,K,EAG/CC,cAAgB,kBAAM,EAAKC,SAAS,CAAEF,SAAU,EAAKN,MAAMM,SAASG,MAAK,kBAAMC,KAAKC,SAAW,S,EAE/FC,YAAc,SAAAC,GAEZ,IAAIC,EAAY,YAAO,EAAKd,MAAMK,aAiBlC,OAfK,EAAKL,MAAMI,UAIJ,EAAKJ,MAAMI,YAAgBU,EAAaC,SAASF,IAC3DC,EAAaE,KAAKH,GAClB,EAAKL,SAAS,CAAEH,YAAaS,EAAcZ,eAAgB,EAAKF,MAAME,aAAcD,MAAO,2CAC3F,EAAKM,kBAGD,EAAKP,MAAME,aAAe,EAAKF,MAAMG,UAAY,EAAKK,SAAS,CAAEL,SAAU,EAAKH,MAAME,eAE1F,EAAKM,SAAS,CAAEP,MAAO,iCAAkCI,YAAa,EAAE,GAAI,GAAIH,aAAc,EAAGE,WAAW,IAC5G,EAAKG,kBAZLO,EAAaE,KAAKH,GAClB,EAAKL,SAAS,CAAEJ,WAAW,EAAMC,YAAaS,EAAcb,MAAO,mCAa9D,M,wEAIC,IAAD,OAEP,OAAQ,6BAEN,kBAACgB,EAAA,EAAD,CAAQC,GAAG,UAAUC,UAAU,cAC7B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAQF,UAAU,cAArC,IAAmD,2CAAnD,KACA,kBAACF,EAAA,EAAOK,OAAR,MACA,kBAACL,EAAA,EAAOM,SAAR,CAAiBJ,UAAU,uBACzB,kBAACF,EAAA,EAAOO,KAAR,CAAaL,UAAU,cACpBM,KAAKzB,MAAMC,QAIhB,kBAACgB,EAAA,EAAOM,SAAR,CAAiBJ,UAAU,uBACzB,kBAACF,EAAA,EAAOO,KAAR,CAAaL,UAAU,cAAvB,UACUM,KAAKzB,MAAME,aADrB,iBACiDuB,KAAKzB,MAAMG,YAKhE,0BAAMgB,UAAU,yCAEbM,KAAKzB,MAAMM,SAASoB,KAAI,SAAAC,GAAC,aACxB,kBAACC,EAAA,GAAD,GAAOC,QAAS,kBAAM,EAAKjB,YAAYe,IAAIG,IAAKH,EAAGR,UAAU,oBAAoBY,IAAK,mBAAqBJ,EAAI,QAA/G,0BAAiI,kBAAjI,sBAAyJ,KAAzJ,uBAAsK,KAAtK,2C,GA1DQK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.83a96dc0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    title: \"Click image to begin!\",\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    isClicked: false,\r\n    isClickedId: [],\r\n    elements: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \r\n  };\r\n\r\n  shuffleImages = () => this.setState({ elements: this.state.elements.sort(() => Math.random() - 0.5) });\r\n\r\n  clickedCard = id => {\r\n\r\n    let newClickedId = [...this.state.isClickedId];\r\n\r\n    if (!this.state.isClicked) {\r\n      newClickedId.push(id);\r\n      this.setState({ isClicked: true, isClickedId: newClickedId, title: \"Click different card to score\" });\r\n\r\n    } else if ((this.state.isClicked) && (!newClickedId.includes(id))) {\r\n      newClickedId.push(id);\r\n      this.setState({ isClickedId: newClickedId, currentScore: ++this.state.currentScore, title: \"Great! Click a card you haven't before\" })\r\n      this.shuffleImages();\r\n\r\n    } else {\r\n      if (this.state.currentScore > this.state.topScore) { this.setState({ topScore: this.state.currentScore })}\r\n\r\n      this.setState({ title: \"You lost! Click card to begin!\", isClickedId: [-2, -3], currentScore: 0, isClicked: false })\r\n      this.shuffleImages();\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    return (<div>\r\n\r\n      <Navbar bg=\"primary\" className=\"text-light\">\r\n        <Navbar.Brand href=\"#home\" className=\"text-light\"> <b>Clicky Game!</b> </Navbar.Brand>\r\n        <Navbar.Toggle />\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Navbar.Text className=\"text-light\">\r\n            {this.state.title}\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Navbar.Text className=\"text-light\">\r\n            Score: {this.state.currentScore} | Top Score: {this.state.topScore}\r\n          </Navbar.Text>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <main className=\"row d-flex justify-content-center m-5\">\r\n\r\n        {this.state.elements.map(e =>\r\n          <Image onClick={() => this.clickedCard(e)} key={e} className=\"align-self-center\" src={'./assets/images/' + e + '.png'} className=\"m-2 image-card\" width={170} height={170} thumbnail />\r\n        )}\r\n\r\n      </main>\r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}